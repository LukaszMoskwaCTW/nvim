
snippet bs Binary search
  def bs(arr, x):
      l, r = 0, len(arr) - 1
      while l <= r:
          mid = (l + r) // 2
          if arr[mid] == x:
              return mid
          elif arr[mid] < x:
              l = mid + 1
          else:
              r = mid - 1
      return -1

snippet gcd Greatest common divisor
  def gcd(a, b):
      while b:
          a, b = b, a % b
      return a

snippet primes Get prime numbers in range
  def primes(n):
      sieve = [True] * (n + 1)
      for p in range(2, int(n ** 0.5) + 1):
          if sieve[p]:
              sieve[p * p: n + 1: p] = [False] * len(sieve[p * p: n + 1: p])
      return [p for p in range(2, n + 1) if sieve[p]]


snippet binlen Get the length in bit of a number
  def binlen(num):
    tot = 0
    while num:
        tot += 1
        num >>= 1
    return tot or 1


snippet binstr Bin to Str with zfill
  def binstr(num, newlen=None):
      val = str(bin(num))[2:]
      if newlen:
          return val.zfill(newlen)
      return val


snippet strmask Str to int mask
    def strmask(input_str):
        res = 0
        for char in input_str:
            value = ord(char) - ord("a")
            res = (1 << value) | res

        return res


snippet printmat Print a matrix
  def printmat(mat):
      res = ""
      for el in mat:
          res += str(el) + "\n"
      print(res)


snippet printll Print a linked list
  def printll(head):
      res = []
      curr = head
      while curr:
          res.append(curr.val)
          curr = curr.next

      print(res)


snippet directions Get the 4 directions
  dirs = [(-1,0),(1,0), (0,1), (0,-1)]
  for yy, xx in dirs:
    dy = yy + y
    dx = xx + x

    if dy < 0 or dx < 0 or dy >= rows or dx >= rows:
      continue


snippet quicksort Basic quicksort implementation
  def partition(array, low, high):
      pivot = array[high]
      i = low - 1

      for j in range(low, high):
          if array[j] < pivot:
              i += 1
              (array[i], array[j]) = (array[j], array[i])

      (array[i + 1], array[high]) = (array[high], array[i + 1])
      return i + 1


  def qs(array, low, high):
      if low < high:
          pi = partition(array, low, high)
          qs(array, low, pi - 1)
          qs(array, pi + 1, high)






